指针可以指向任何数据类型，但存储的值必须是内存地址
数组退化后，指针指向该数组第一个元素


C语言声明符的优先级从高到低如下：

1.数组 [] 和函数 ()
（例如 array[5] 或 func(int)）

2.指针 *
（例如 *ptr）

3.基本类型
（例如 int）

括号 () 可以改变默认优先级（例如 int (*ptr)[5]）
数组后是每个元素
指针后是指向的元素


数组退化的本质：
数组名在大多数表达式中退化为指向首元素的指针，但以下情况例外：

作为 sizeof 的操作数（如 sizeof(array) 返回整个数组的大小）

作为 & 的操作符（如 &array 得到整个数组的地址，类型为 int(*)[5][5]）

多维数组与指针的关系：

int array[5][5] 的每个元素 array[i] 是一个一维数组（类型为 int[5]）

退化后，array 变为 int (*)[5]，指向首行 array[0]


案例分析：
int array       整型数字array
int *array      指针array，指向int
int array[5]    数组array，里面有5个int
    作为参数时，退化为int *array，指向array[0]

int **array     指针array，指向另一个指针（令“另一个指针”为p），指针p指向int
int *array[5]   数组array，里面有5个元素，每个元素是指针，指向int
    作为参数时，array退化为int **array，指向*array[0]

int (*array)[5] 指针array，指向一个数组，数组中有5个int

int array[5][5] 数组array，里面有5个元素，每个元素都是array[5]
    作为参数时，退化为int *array[5]，指向array[0][0]

int (*array)[5][5]  指针array，指向一个二维数组，数组中每个元素都是int
int (*array[5])[5]  数组array，有5个元素，都是指针，每个指针都指向array[5]，这些数组的每个元素都是int
    作为参数时，退化为int (**array)[5]，指向(*array[0])[0]
int *array[5][5]    数组array，有5个元素，array中的每个元素都是array[5]，这些数组的每个元素都是指针
    作为参数时，退化为int *(*array)[5]，指向*array[0][0]